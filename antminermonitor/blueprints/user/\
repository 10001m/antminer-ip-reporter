from flask import Blueprint, flash, redirect, render_template, session, url_for
from flask_login import login_required, login_user, logout_user
from werkzeug.security import check_password_hash

from lib.util_url import is_safe_url
from antminermonitor.extensions import db
from antminermonitor.blueprints.user.forms import LoginForm, PasswordResetForm
from antminermonitor.blueprints.user.models import User

user = Blueprint('user', __name__, template_folder='templates')


@user.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()

    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()
        if user:
            if check_password_hash(user.password_hash, form.password.data):
                login_user(user, remember=form.remember.data)
                if 'next' in session:
                    next = session['next']
                    if is_safe_url(next):
                        return redirect(next)
                return redirect(url_for('antminer.miners'))
        flash("Invalid username or password")
        return render_template('user/login.html', form=form)

    return render_template('user/login.html', form=form)


@user.route('/reset', methods=['GET', 'POST'])
@login_required
def reset():
    form = PasswordResetForm()

    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()
        if user:
            password = form.password.data
            user.set_password(password)
            db.session.commit()
            if 'next' in session:
                next = session['next']
                if is_safe_url(next):
                    return redirect(next)
            flash("Password updated for user '{}'".format(user.username))
            return redirect(url_for('user.reset'))
        flash("User '{}' does not exist".format(form.username.data))
        return render_template('user/reset.html', form=form)

    return render_template('user/reset.html', form=form)


@user.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('antminer.miners'))
